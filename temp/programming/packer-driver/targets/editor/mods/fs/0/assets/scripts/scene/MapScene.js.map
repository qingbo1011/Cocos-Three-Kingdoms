{"version":3,"sources":["file:///D:/git/github/mszlu/games/slg/ms-sg/assets/scripts/scene/MapScene.ts"],"names":["_decorator","Component","Node","Vec2","TiledMap","MapResBuildLogic","MapBuildTipsLogic","MapCityLogic","MapCommand","MapLogic","MapResType","MapResLogic","MapUtil","MapFacilityBuildLogic","MapBuildTagLogic","MapSysCityLogic","EventMgr","ccclass","property","MapScene","onLoad","_cmd","getInstance","tiledMap","mapLayer","addComponent","tmxAsset","proxy","tiledMapAsset","initMapConfig","initData","on","onMapShowAreaChange","onScrollToMap","scheduleOnce","myCity","cityProxy","getMyMainCity","node","getComponent","setTiledMap","scrollToMapPoint","x","y","onTimer","schedule","onDestroy","targetOff","clearData","qryAreaIds","length","qryIndex","shift","qryData","getMapAreaData","checkAndUpdateQryTime","qryNationMapScanBlock","nowTime","Date","now","_lastUpPosTime","point","getCurCenterPoint","_centerX","_centerY","upPosition","centerPoint","centerAreaId","addIds","removeIds","console","log","arguments","resLogic","buildResLogic","buildFacilityLogic","tagLogic","buildTipsLogic","cityLogic","sysCityLogic","udpateShowAreas","i","areaData","startCellX","endCellX","startCellY","endCellY","cellId","getIdByCellPoint","getResData","addItem","type","SYS_CITY","buildProxy","getBuild","build","SYS_FORTRESS","FORTRESS","getCity"],"mappings":"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","sourcesContent":["import { _decorator, Component, Node, Vec2, TiledMap } from 'cc';\nconst { ccclass, property } = _decorator;\n\nimport MapResBuildLogic from \"../map/MapResBuildLogic\";\nimport MapBuildTipsLogic from \"../map/MapBuildTipsLogic\";\nimport MapCityLogic from \"../map/MapCityLogic\";\nimport { MapCityData } from \"../map/MapCityProxy\";\nimport MapCommand from \"../map/MapCommand\";\nimport MapLogic from \"../map/MapLogic\";\nimport { MapAreaData, MapResType } from \"../map/MapProxy\";\nimport MapResLogic from \"../map/MapResLogic\";\nimport MapUtil from \"../map/MapUtil\";\nimport MapFacilityBuildLogic from \"../map/MapFacilityBuildLogic\";\nimport MapBuildTagLogic from \"../map/MapBuildTagLogic\";\nimport MapSysCityLogic from \"../map/MapSysCityLogic\";\nimport { EventMgr } from '../utils/EventMgr';\n\n@ccclass('MapScene')\nexport default class MapScene extends Component {\n    @property(Node)\n    mapLayer: Node = null;\n\n    protected _cmd: MapCommand = null;\n    protected _centerX: number = 0;\n    protected _centerY: number = 0;\n    protected _lastUpPosTime: number = 0;\n\n    protected onLoad(): void {\n        this._cmd = MapCommand.getInstance();\n        \n\n        //初始化地图\n        let tiledMap: TiledMap = this.mapLayer.addComponent(TiledMap);\n        tiledMap.tmxAsset = this._cmd.proxy.tiledMapAsset;\n        \n        MapUtil.initMapConfig(tiledMap);\n        this._cmd.initData();\n        EventMgr.on(\"map_show_area_change\", this.onMapShowAreaChange, this);\n        EventMgr.on(\"scroll_to_map\", this.onScrollToMap, this);\n        this.scheduleOnce(() => {\n            let myCity: MapCityData = this._cmd.cityProxy.getMyMainCity();\n            this.node.getComponent(MapLogic).setTiledMap(tiledMap);\n            this.node.getComponent(MapLogic).scrollToMapPoint(new Vec2(myCity.x, myCity.y));\n            this.onTimer();//立即执行一次\n        });\n        this.schedule(this.onTimer, 0.2);\n    }\n\n    protected onDestroy(): void {\n        EventMgr.targetOff(this);\n        this._cmd.proxy.clearData();\n        this._cmd = null;\n    }\n\n    protected onTimer(): void {\n\n        if (this._cmd.proxy.qryAreaIds && this._cmd.proxy.qryAreaIds.length > 0) {\n            let qryIndex: number = this._cmd.proxy.qryAreaIds.shift();\n            let qryData: MapAreaData = this._cmd.proxy.getMapAreaData(qryIndex);\n            if (qryData.checkAndUpdateQryTime()) {\n                this._cmd.qryNationMapScanBlock(qryData);\n            }\n        }\n        let nowTime: number = Date.now();\n        if (nowTime - this._lastUpPosTime > 1000) {\n            this._lastUpPosTime = nowTime;\n            //间隔一秒检测中心点是否改变\n            let point: Vec2 = MapCommand.getInstance().proxy.getCurCenterPoint();\n            if (point != null && (this._centerX != point.x || this._centerY != point.y)) {\n                this._centerX = point.x;\n                this._centerY = point.y;\n                MapCommand.getInstance().upPosition(point.x, point.y);\n            }\n        }\n    }\n\n    protected onMapShowAreaChange(centerPoint: Vec2, centerAreaId: number, addIds: number[], removeIds: number[]): void {\n        \n        console.log(\"map_show_area_change\", arguments);\n        let resLogic: MapResLogic = this.node.getComponent(MapResLogic);\n        let buildResLogic: MapResBuildLogic = this.node.getComponent(MapResBuildLogic);\n        let buildFacilityLogic: MapFacilityBuildLogic = this.node.getComponent(MapFacilityBuildLogic);\n        let tagLogic: MapBuildTagLogic = this.node.getComponent(MapBuildTagLogic);\n        let buildTipsLogic: MapBuildTipsLogic = this.node.getComponent(MapBuildTipsLogic);\n        let cityLogic: MapCityLogic = this.node.getComponent(MapCityLogic);\n        let sysCityLogic: MapSysCityLogic = this.node.getComponent(MapSysCityLogic);\n\n        //更新展示区域\n        resLogic.udpateShowAreas(addIds, removeIds);\n        buildResLogic.udpateShowAreas(addIds, removeIds);\n        buildFacilityLogic.udpateShowAreas(addIds, removeIds);\n        tagLogic.udpateShowAreas(addIds, removeIds);\n        buildTipsLogic.udpateShowAreas(addIds, removeIds);\n        cityLogic.udpateShowAreas(addIds, removeIds);\n        sysCityLogic.udpateShowAreas(addIds, removeIds);\n\n        //更新区域内的具体节点\n        for (let i: number = 0; i < addIds.length; i++) {\n            let areaData: MapAreaData = this._cmd.proxy.getMapAreaData(addIds[i]);\n            // console.log(\"areaData\", areaData);\n            for (let x: number = areaData.startCellX; x < areaData.endCellX; x++) {\n                for (let y: number = areaData.startCellY; y < areaData.endCellY; y++) {\n                    let cellId: number = MapUtil.getIdByCellPoint(x, y);\n                    //资源\n                    if (this._cmd.proxy.getResData(cellId)) {\n                        resLogic.addItem(addIds[i], this._cmd.proxy.getResData(cellId));\n                    }\n\n                    if (this._cmd.proxy.getResData(cellId).type == MapResType.SYS_CITY) {\n                        sysCityLogic.addItem(addIds[i], this._cmd.proxy.getResData(cellId));\n                    }\n\n                    //建筑\n                    if (this._cmd.buildProxy.getBuild(cellId) != null) {\n                        var build = this._cmd.buildProxy.getBuild(cellId);\n                        if(build.type == MapResType.SYS_CITY){\n                            //系统城池\n                            sysCityLogic.addItem(addIds[i], build);\n                        }else if(build.type == MapResType.SYS_FORTRESS){\n                            console.log(\"MapResType.SYS_FORTRESS\");\n                            resLogic.addItem(addIds[i], build);\n                        } else{\n                            buildResLogic.addItem(addIds[i], build);\n                        }\n                    }\n\n                    if (this._cmd.buildProxy.getBuild(cellId) != null) {\n                        buildFacilityLogic.addItem(addIds[i], this._cmd.buildProxy.getBuild(cellId));\n                    }\n\n                    //标记\n                    if (this._cmd.proxy.getResData(cellId).type <= MapResType.FORTRESS) {\n            \n                        tagLogic.addItem(addIds[i], this._cmd.proxy.getResData(cellId));\n                    }\n\n                    if (this._cmd.buildProxy.getBuild(cellId) != null) {\n                        buildTipsLogic.addItem(addIds[i], this._cmd.buildProxy.getBuild(cellId));\n                    }\n\n                    //城池\n                    if (this._cmd.cityProxy.getCity(cellId) != null) {\n                        cityLogic.addItem(addIds[i], this._cmd.cityProxy.getCity(cellId));\n                    }\n\n                }\n            }\n        }\n    }\n\n    protected onScrollToMap(x: number, y: number): void {\n        this.node.getComponent(MapLogic).scrollToMapPoint(new Vec2(x, y));\n    }\n}\n"]}